import type { ${MODEL_NAME}Stream } from '@prisma/client'
import { ComposeDB } from './index.js'
import {
  Create${MODEL_NAME}Input,
  Create${MODEL_NAME}Mutation,
  Update${MODEL_NAME}Input,
  Update${MODEL_NAME}Mutation,
  ${MODEL_NAME}Input,
} from '../types.js'
import {
  Create${MODEL_NAME}InputSchema,
  Update${MODEL_NAME}InputSchema,
  ${MODEL_NAME}InputSchema,
} from '../validation.js'
import {
  Create${MODEL_NAME}Document,
  Update${MODEL_NAME}Document,
} from '../mutations.js'
import { Expand } from './utils.js'

export type Parsed${MODEL_NAME}Stream<T extends ${MODEL_NAME}Stream> = T & {
  data: ${MODEL_NAME}Input
}

export class ${MODEL_NAME}Service {
  private _client: ComposeDB

  constructor(client: ComposeDB) {
    this._client = client
  }

  parse<T extends ${MODEL_NAME}Stream>(
    ${MODEL_NAME_LOWERCASE}Stream: T
  ): Parsed${MODEL_NAME}Stream<T> {
    return {
      ...${MODEL_NAME_LOWERCASE}Stream,
      data: ${MODEL_NAME}InputSchema().parse(${MODEL_NAME_LOWERCASE}Stream.stream_content),
    }
  }

  async create(
    input: Expand<Create${MODEL_NAME}Input>
  ): Promise<Create${MODEL_NAME}Mutation> {
    return await this._client.composeMutation<
      Create${MODEL_NAME}Input,
      Create${MODEL_NAME}Mutation
    >(Create${MODEL_NAME}Document, input, Create${MODEL_NAME}InputSchema())
  }

  async update(
    input: Expand<Update${MODEL_NAME}Input>
  ): Promise<Update${MODEL_NAME}Mutation> {
    return await this._client.composeMutation<
      Update${MODEL_NAME}Input,
      Update${MODEL_NAME}Mutation
    >(Update${MODEL_NAME}Document, input, Update${MODEL_NAME}InputSchema())
  }
}
